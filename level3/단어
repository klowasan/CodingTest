[Link](https://programmers.co.kr/learn/courses/30/lessons/43164)
```
import java.util.*;

class Solution {
    int min = 0;
    public int solution(String begin, String target, String[] words) {
        min = words.length;
        
        // 0. 매치 될 문자열이 없을 경우 0을 반환
        boolean hasTarget = false;
        for (String word : words) {
            if (target.equals(word)) {
                hasTarget = true;
            }
        }
        if (!hasTarget) {
            return 0;
        }
        
        boolean[] visited = new boolean[min];
        // 1. begin 문자에서 하나 변경했을때 연결되는것을 반복적으로 찾고 최소값을 찾기
        dfs(words, visited, target, begin, 0);
        
        return min;
    }
    
    public void dfs(String[] words, boolean[] visited, String target, String modifiedStr, int min) {
        if (target.equals(modifiedStr)) {
            if (this.min > min) {
                this.min = min;
            }
            
            // for (int i = 0; i < words.length; i++) {
            //     if (visited[i]) {
            //         System.out.print(words[i] + " ");
            //     }
            // }
            // System.out.println();
            
            return;
        }
        
        for (int i = 0; i < words.length; i++) {
            // todo: visited가false && 문자하나 변경하면 되는 문자
            if (visited[i] == false && isMatchedStr(modifiedStr, target)) {
                visited[i] = true;
                min++;
                dfs(words, visited, target, target, min);
                visited[i] = false;
            } else if (visited[i] == false && isMatchedStr(modifiedStr, words[i])) {
                visited[i] = true;
                min++;
                dfs(words, visited, target, words[i], min);
                visited[i] = false;
            }
        }
    }
    
    public boolean isMatchedStr(String target1, String target2) {
        char[] target1Array = target1.toCharArray();
        char[] target2Array = target2.toCharArray();
        int notMatchCount = 0;
        int length = target1Array.length;
        for (int i = 0; i < length; i++) {
            if (target1Array[i] == target2Array[i]) {
                continue;
            }
            notMatchCount++;
        }
        
        if (notMatchCount > 1) {
            return false;
        }
        
        return true;
    }
}
```
